---

---

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
    <title>TikyTacka</title>
  </head>
  <body>
    <!-- Información de derechos de autor -->
    <div class="copyright">
      <span>Desarrollado por</span>
      <span class="big">Emiliano Rios</span>
      <span class="big">Lautaro Aboueid</span>
      <span>2024</span>
    </div>
    <!-- Logo del juego -->
    <img src="/logo/logo.svg" alt="Logo TickyTacka" width="420" height="162" />
    <!-- Grupo de botones para seleccionar la dificultad -->
    <div class="button-group">
      <button class="difficultyButton">Fácil</button>
      <button class="difficultyButton">Medio</button>
      <button class="difficultyButton">Difícil</button>
      <button class="difficultyButton">Extremo</button>
    </div>
    <!-- Tabla del juego -->
    <div class="gameTable">
      <table>
        <tbody>
          <tr>
            <td class="cell" id="0"></td>
            <td class="cell" id="1"></td>
            <td class="cell" id="2"></td>
          </tr>
          <tr>
            <td class="cell" id="3"></td>
            <td class="cell" id="4"></td>
            <td class="cell" id="5"></td>
          </tr>
          <tr>
            <td class="cell" id="6"></td>
            <td class="cell" id="7"></td>
            <td class="cell" id="8"></td>
          </tr>
        </tbody>
      </table>
    </div>
    <!-- Botón para reiniciar el juego -->
    <button class="replayButton">Volver a jugar</button>
    <!-- Capa de superposición para el final del juego -->
    <div class="end-game-overlay">
      <div class="endGame">
        <div class="text"></div>
      </div>
    </div>
    <div class="copyright">
      <span>Desarrollado por</span>
      <span class="big">Emiliano Rios</span>
      <span class="big">Lautaro Aboueid</span>
      <span>2024</span>
    </div>
  </body>
</html>

<script is:inline>
  // Declaración de variables y constantes
  let origBoard;
  let difficulty = "facil";

  // Configuración de jugadores y combinaciones ganadoras
  const huPlayer = { id: "O", icon: "/zero.svg" };
  const aiPlayer = { id: "X", icon: "/equis.svg" };
  const winCombos = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [6, 4, 2],
  ];

  // Definición de mensajes de estado del juego
  const statusGameVariables = {
    tie: "Tie Game!",
    win: "You win!",
    lose: "You lose!",
  };

  // Evento para reiniciar el juego al hacer clic en el botón de "Volver a jugar"
  const button = document.querySelector(".replayButton");
  button.addEventListener("click", startGame, false);

  // Selección de todas las celdas del tablero y llamada a la función startGame()
  const cells = document.querySelectorAll(".cell");
  startGame();

  // Función para iniciar el juego
  function startGame() {
    document.querySelector(".endGame").style.display = "none";
    document.querySelector(".end-game-overlay").style.display = "none";
    origBoard = Array.from(Array(9).keys());
    for (let i = 0; i < cells.length; i++) {
      cells[i].innerText = "";
      cells[i].style.removeProperty("background-color");
      cells[i].addEventListener("click", turnClick, false);
    }
  }

  // Función para manejar el clic en una celda
  function turnClick(square) {
    if (typeof origBoard[square.target.id] == "number") {
      turn(square.target.id, huPlayer);
      if (!checkWin(origBoard, huPlayer.id) && !checkTie())
        turn(bestSpot(), aiPlayer);
    }
  }

  // Función para realizar un movimiento en una celda
  function turn(squareId, player) {
    origBoard[squareId] = player.id;
    document.getElementById(squareId).innerHTML =
      `<img class="vector" src="${player.icon}" />`;
    const gameWon = checkWin(origBoard, player.id);
    if (gameWon) gameOver(gameWon);
  }

  // Función para verificar si un jugador ha ganado
  function checkWin(board, player) {
    const plays = board.reduce(
      (a, e, i) => (e === player ? a.concat(i) : a),
      []
    );
    let gameWon = null;
    for (const [index, win] of winCombos.entries()) {
      if (win.every((elem) => plays.indexOf(elem) > -1)) {
        gameWon = { index: index, player: player };
        break;
      }
    }
    return gameWon;
  }

  // Función para finalizar el juego
  function gameOver(gameWon) {
    for (const index of winCombos[gameWon.index]) {
      document.getElementById(index).style.backgroundColor =
        gameWon.player == huPlayer.id ? "greenyellow" : "#EA3333";
    }
    for (let i = 0; i < cells.length; i++) {
      cells[i].removeEventListener("click", turnClick, false);
    }
    declareWinner(gameWon.player == huPlayer.id ? "win" : "lose");
    document.querySelector(".endGame .text").style.color =
      gameWon.player == huPlayer.id ? "greenyellow" : "#EA3333";
  }

  // Función para declarar al ganador del juego
  function declareWinner(who) {
    document.querySelector(".endGame").style.display = "block";
    document.querySelector(".endGame .text").innerText =
      statusGameVariables[who];
    document.querySelector(".end-game-overlay").style.display = "flex";
  }

  // Función para obtener las celdas vacías del tablero
  function emptySquares() {
    return origBoard.filter((s) => typeof s == "number");
  }

  // Función para generar un número aleatorio dentro de un rango de probabilidades
  function getRandomNumber(probabilities) {
    const randomNumber = Math.random();
    let cumulativeProbability = 0;
    for (let i = 0; i < probabilities.length; i++) {
      cumulativeProbability += probabilities[i];
      if (randomNumber < cumulativeProbability) {
        return i;
      }
    }
  }

  // Función para determinar el mejor movimiento para la IA
  function bestSpot() {
    const spots = emptySquares();

    const randomSpot = spots[Math.floor(Math.random() * spots.length)];

    const probabilityError = {
      extremo: 0.9,
      dificil: 0.7,
      medio: 0.5,
      facil: 0.3,
    };

    const errorProbably = getRandomNumber([
      probabilityError[difficulty],
      1 - probabilityError[difficulty],
    ]);

    if (errorProbably === 1) {
      return randomSpot;
    } else {
      return minimax(origBoard, aiPlayer.id).index;
    }
  }

  // Función para verificar si el juego ha terminado en empate
  function checkTie() {
    if (emptySquares().length == 0) {
      for (let i = 0; i < cells.length; i++) {
        cells[i].style.backgroundColor = "orange";
        cells[i].removeEventListener("click", turnClick, false);
      }
      document.querySelector(".endGame .text").style.color = "orange";
      declareWinner("tie");

      return true;
    }
    return false;
  }

  // Función para implementar el algoritmo minimax
  function minimax(newBoard, player) {
    const availSpots = emptySquares();

    if (checkWin(newBoard, huPlayer.id)) {
      return { score: -10 };
    } else if (checkWin(newBoard, aiPlayer.id)) {
      return { score: 10 };
    } else if (availSpots.length === 0) {
      return { score: 0 };
    }
    const moves = [];
    for (let i = 0; i < availSpots.length; i++) {
      const move = {};
      move.index = newBoard[availSpots[i]];
      newBoard[availSpots[i]] = player;

      if (player == aiPlayer.id) {
        const result = minimax(newBoard, huPlayer.id);
        move.score = result.score;
      } else {
        const result = minimax(newBoard, aiPlayer.id);
        move.score = result.score;
      }

      newBoard[availSpots[i]] = move.index;

      moves.push(move);
    }

    let bestMove;
    if (player === aiPlayer.id) {
      let bestScore = -10000;

      for (let i = 0; i < moves.length; i++) {
        if (moves[i].score > bestScore) {
          bestScore = moves[i].score;
          bestMove = i;
        }
      }
    } else {
      let bestScore = 10000;
      for (let i = 0; i < moves.length; i++) {
        if (moves[i].score < bestScore) {
          bestScore = moves[i].score;
          bestMove = i;
        }
      }
    }

    return moves[bestMove];
  }

  // Función para obtener todos los elementos que coincidan con un selector CSS
  function getAllElements(searchTerm) {
    const elements = document.querySelectorAll(searchTerm);
    return Array.from(elements);
  }

  // Selección de todos los botones de dificultad y asignación de eventos de clic
  const buttons = getAllElements(".difficultyButton");

  // Función para normalizar un string
  function normalizeString(string) {
    return string
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "");
  }

  // Asignación de eventos de clic a los botones de dificultad
  buttons.forEach((button) => {
    button.addEventListener("click", () => {
      difficulty = normalizeString(button.textContent);
      getAllElements(".selected").forEach((button) =>
        button.classList.remove("selected")
      );
      button.classList.add("selected");
    });
    if (difficulty === normalizeString(button.textContent)) {
      button.classList.add("selected");
    }
  });
</script>

<style is:global>
  html {
    background-color: #333;
    overflow: hidden;
  }

  * {
    font-family: "Poppins";
    box-sizing: border-box;
  }

  body {
    margin: 0 auto;
    padding: 2rem;
    text-align: center;
    color: aliceblue;
    font-family: "Arial";
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: calc(100vh - 2rem);
    position: relative;
  }

  h1 {
    font-size: 3rem;
  }

  .gameTable {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .endGame {
    display: none;
  }

  table {
    color: aliceblue;
    border-spacing: 10px;
    margin: 0 0 50px 0;
  }

  tr td {
    border-radius: 6px;
    border: 1px solid white;
    max-width: 100px;
    max-height: 100px;
    width: 100px;
    height: 100px;
    font-size: 56px;
    transition: all 0.3s ease-in-out;
  }

  td:hover {
    cursor: pointer;
    scale: 0.975;
  }

  .difficultyButton {
    padding: 6px 12px;
    border: none;
    border-radius: 6px;
    background-color: greenyellow;
    color: black;
    font-weight: 600;
    font-size: 15px;
    transition: all 0.3s ease-in-out;
  }

  .difficultyButton:hover,
  .replayButton:hover {
    filter: brightness(0.85);
    scale: 0.95;
    cursor: pointer;
  }

  .button-group {
    display: flex;
    gap: 8px;
    align-items: center;
    justify-content: center;
    margin: 20px 0;
  }

  .replayButton {
    padding: 12px 36px;
    font-weight: 600;
    border-radius: 6px;
    border: none;
    transition: all 0.3s ease-in-out;
    z-index: 1;
    position: relative;
  }

  .selected {
    background-color: green;
    color: white;
  }

  .end-game-overlay {
    position: absolute;
    width: 100%;
    height: 150%;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.8);
    display: none;
    padding-top: 25%;
    justify-content: start;
    align-items: center;
    flex-direction: column;
    gap: 20px;
    z-index: 0;
  }

  .text {
    font-size: 128px;
    font-weight: 900;
  }

  .vector {
    width: 40px;
    aspect-ratio: 1/1;
  }
  .copyright {
    font-size: 32px;
    line-height: 1.1em;
    position: absolute;
    top: 51.5%;
    left: 12%;
    display: flex;
    flex-direction: column;
    align-items: center;
    font-weight: 200;
    transform: rotate3d(0.8, 0.5, 0.4, -40deg);
    transition: all 0.3s ease-in-out;
  }

  @media (max-width: 991px) {
    .copyright {
      display: none !important;
    }
  }

  .copyright:hover {
    transform: rotate3d(0, 0, 0, 0deg);
    cursor: pointer;
  }

  .big {
    font-weight: 700;
  }
</style>
